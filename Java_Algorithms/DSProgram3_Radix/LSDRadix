import java.util.HashMap;

//Written and Submitted by Safia Hareema

import java.util.LinkedList;
import java.util.List;
import java.io.*;
import java.util.Scanner;
import java.lang.*;

public class LSDRadixSort {
	private char[][] wordArray;
	private String[] pointerArr;
	private List<String> list = new LinkedList<>();
	private String[] buckets = new String[27];
	private int wordCount = 0;
	private int radixIndex = 20;
	private int characterOperations = 0;
	private int totalWords;

	public LSDRadixSort(String file) throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(file));
		String line = null;
		int count = 0;
		while ((line = reader.readLine()) != null) {
			count++;
			addWordToList(line.trim());
		}
		reader.close();

		this.wordArray = new char[count][21];
		this.pointerArr = new String[count];
		totalWords = count;
		for (int i = 0; i < pointerArr.length; i++) {
			pointerArr[i] = "" + i;
		}

		flushBuckets();
		addWordsToArray();
	}

	public void radixSort() {
		int bucketIndex = 0;
		char c = 'x';
		int wordIndex = 0; 
		while (radixIndex >= 0) {
			for (int i = 0; i < pointerArr.length; i++) {
				// word = getWord(i);
				wordIndex = Integer.parseInt(pointerArr[i]);
				c = wordArray[wordIndex][radixIndex];
				if (c == '!') {
					buckets[0] += " " + wordIndex;
					characterOperations++;
				} else {
					bucketIndex = (int) (c) - (int) 'A' + 1;
					buckets[bucketIndex] += wordIndex + " ";
					characterOperations++;
				}
			}

			updatePointerArray();
			radixIndex--;
		}
		//printArray();
	}

	public void updatePointerArray() {
		String[] orderedWords = null;
		int pointerArrIndex = 0;
		for (int i = 0; i < buckets.length; i++) {
			if (!(buckets[i].isEmpty())) {
				orderedWords = buckets[i].split("\\s+");
				for (int j = 0; j < orderedWords.length; j++) {
					if (!(orderedWords[j].isEmpty())) {
						this.pointerArr[pointerArrIndex] = orderedWords[j];
						pointerArrIndex++;
					}
				}
			}
		}

		flushBuckets();

	}

	public int getCharacterOperations(){
		return characterOperations;
	}
	
	public int getTotalWords(){
		return totalWords;
	}
	
	public void flushBuckets() {
		for (int i = 0; i < buckets.length; i++) {
			buckets[i] = "";
		}
	}

	public String getWord(int index) {
		String result = "";
		char c = 'x';
		for (int j = 0; j < wordArray[0].length; j++) {
			c = wordArray[index][j];
			if (c != '!') {
				result += wordArray[index][j];
			}
		}
		return result;
	}

	public void addWordsToArray() {
		char c = 'x';
		for (String word : this.list) {
			for (int i = 0; i < word.length(); i++) {
				c = word.charAt(i);
				this.wordArray[wordCount][i] = c;
			}
			this.wordCount++;

		}

	}

	public void addWordToList(String word) {
		if (word.length() < 21) {
			word = word.toUpperCase();
			word = padWord(word);
		}
		// put word in linked list
		list.add(word);
	}

	public String padWord(String word) {
		char pad = '!';
		while (word.length() < 21) {
			word = word + pad;
		}
		return word;
	}

	public void printArray(String outputFile) throws IOException {
		File file = new File(outputFile);
		if(!(file.exists())){
		    file.createNewFile();
		    System.out.println("creating new file");
		}
		//FileWriter test = new FileWriter(outputFile); 
		FileOutputStream oFile = new FileOutputStream(file, false);
		BufferedWriter outputFileWriter = new BufferedWriter(new FileWriter(outputFile,true));
		String word = "";
		for (int i = 0; i < this.pointerArr.length; i++) {
			word = getWord(Integer.parseInt(pointerArr[i]));
			System.out.println(word);
			outputFileWriter.write(word);
			outputFileWriter.newLine();
		}
		outputFileWriter.close();
	}

}
