import java.math.*;
import java.util.Random;

public class Select1 {
	public int comparisonCount = 0;
	public int[] array;

	public Select1() {
	}

	public int SELECT(int[] array, int n , int k) {
		int ksmallest; 
		this.array = new int[array.length];
		System.arraycopy(array, 0, this.array, 0, array.length);
		this.sort(this.array, 0, this.array.length - 1);
		ksmallest = this.array[k-1];
		return ksmallest;
	}

	public int getCompCount() {
		return this.comparisonCount;
	}
	
	public void resetCompCount() {
		this.comparisonCount = 0;
	}

	public void setNewArray(int[] newArray) {
		this.array = newArray;
	}

	public void sort(int[] array, int left, int right) {
		int pivot, pivotIndex, temp, l, r;
		Random random = new Random();
		if (left >= right) {
			return;
		}
		pivotIndex = random.nextInt(right - left) + left;
		// System.out.println("pivot index:" + pivotIndex);
		// swap left with pivot
		temp = array[left];
		array[left] = array[pivotIndex];
		array[pivotIndex] = temp;
		// assign picot
		pivot = array[left];
		l = left + 1;
		r = right;
		while (l <= r) {
			// scan left side
			while (l <= r && compare(array[l], pivot) <= 0) {
				l++;
			}
			// scan right side
			while (l <= r && compare(array[r], pivot) > 0) {
				r--;
			}
			// swap left and right
			if (l < r) {
				temp = array[l];
				array[l] = array[r];
				array[r] = temp;
				l++;
				r--;
			}
		}
		// swap left with r
		temp = array[left];
		array[left] = array[r];
		array[r] = temp;
		sort(array, left, r - 1);
		sort(array, r + 1, right);
		// swap pivot with right most element of left block..aka where
		// sitting
		// swap pivot with right
		temp = array[left];
	}

	// comparison count method
	public int compare(int x, int y) {
		this.comparisonCount++;
		int result;
		if (x > y)
			result = 1;
		else if (x < y)
			result = -1;
		else
			result = 0;
		return result;
	}
	


	public void printArray() {
		for (int i : array) {
			System.out.print(i + " ");
		}
	}

	public static void main(String[] args) {
		int[] test = new int[8];
		test[0] = 5;
		test[1] = 3;
		test[2] = 4;
		test[3] = 2;
		test[4] = 6;
		test[5] = 2;
		test[6] = 8;
		test[7] = 1;
		Select1 qs = new Select1();
		System.out.println("Array before QuickSort:");
		qs.printArray();
		System.out.println();
		final long startTime = System.currentTimeMillis();
		qs.sort(test, test.length, test.length/2);
		final long endTime = System.currentTimeMillis();
		System.out.println("Array after QuickSort:");
		qs.printArray();
		System.out.println();
		System.out.println("Number of key comparisons: " + qs.getCompCount());
		System.out.println("Total execution time: " + (endTime - startTime) + " ms");
	}
}
