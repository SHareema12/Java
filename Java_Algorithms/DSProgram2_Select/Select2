import java.util.Random;

public class Select2 {
	public int comparisonCount = 0;
	public int[] array;

	public Select2() {
	}
	
	public void resetCompCount() {
		this.comparisonCount = 0;
	}
	
	public int SELECT(int[] array, int n, int k) {
		this.array = new int[array.length];
		int ksmallest;
		System.arraycopy(array, 0, this.array, 0, array.length);
		if (array.length <= 25) {
			SelectionSort();
			ksmallest = this.array[k-1];
		}
		else {
			ksmallest = quickKSelect(this.array, k);
		}
		return ksmallest;
	}
	
	public void SelectionSort() {
		int temp;
		for(int i = 1; i < this.array.length; i++) {
			int j = i;
			while(j > 0 && compare(this.array[j],this.array[j-1]) == -1) {
				temp = this.array[j]; 
				this.array[j] = this.array[j-1];
				this.array[j-1] = temp;
				j--;
			}
		}
			
	}
	
	public int quickKSelect(int[] array, int k) {
		int randomIndex, randomElement, LCounter = 0, ECounter = 0, GCounter = 0, comp, ksmallest;
		int[] L = new int[array.length], E = new int[array.length], G = new int[array.length]; 
		if(array.length == 1) {
			return array[0];
		}
		else {
			randomIndex = getRandomNumber(array.length);
			randomElement = array[randomIndex];
			//partition to L , E , G
			for (int i = 0; i < array.length; i++) {
				comp = compare(randomElement, array[i]); 
				// L partition
				if (comp == -1) {
					L[LCounter] = array[i];
					LCounter++;
				}
				// E partition
				else if (comp == 0) {
					E[ECounter] = array[i];
					ECounter++;
				}
				// G partition
				else if (comp == 1) {
					G[GCounter] = array[i];
					GCounter++;
				}
			}
			//flush out extra spaces in each array and send back the truncated copy 
			L = flushArray(L, LCounter);
			E = flushArray(E, ECounter);
			G = flushArray(G, GCounter);
			
			if (k <= L.length) {
				ksmallest = quickKSelect(L,k);
			}
			else if (k <= (L.length + E.length)) {
				return randomElement;
			}
			else {
				ksmallest = quickKSelect(G,k - L.length - E.length);
			}
			
		}
		return ksmallest;
	}
	
	// comparison count method
		public int compare(int x, int y) {
			this.comparisonCount++;
			int result;
			if (x > y)
				result = 1;
			else if (x < y)
				result = -1;
			else
				result = 0;
			return result;
		}
		
	public int[] flushArray(int[] array, int endIndex) {
		int[] result = new int[endIndex];
		System.arraycopy(array, 0, result, 0, result.length);
		return result;
	}

	public int getRandomNumber(int arrLength) {
		Random random = new Random(); 
		return random.nextInt(arrLength);
	}
		
	public void printArray() {
		for (int i : array) {
			System.out.print(i + " ");
		}
	}
	
	public void Select2Sort() {
		return;
	}

}
